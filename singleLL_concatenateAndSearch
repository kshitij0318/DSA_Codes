#include<iostream>
using namespace std;
struct Node {
    int data;
    Node* next;  
    Node(int value) : data(value), next(nullptr) {}
};
void printList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}
Node* concatenateLists(Node* list1, Node* list2) 
{
    if (list1 == nullptr) 
    {
        return list2;
    }
    Node* current = list1;
    while (current->next != nullptr) 
    {
        current = current->next;
    }   
    current->next = list2;
    return list1;
}
Node* searchNode(Node* head, int value) 
{
    Node* current = head;
    while (current != nullptr) 
    {
        if (current->data == value) 
        {
            return current;
        }
        current = current->next;
    }
    return nullptr; 
}
int main() 
{
    Node* list1 = new Node(9);
    list1->next = new Node(6);
    list1->next->next = new Node(4);
    list1->next->next->next = new Node(3);
    Node* list2 = new Node(2);
    list2->next = new Node(5);
    list2->next->next = new Node(6);
    list2->next->next->next = new Node(8);
    Node* concatenatedList = concatenateLists(list1, list2);
    std::cout << "Concatenated List: ";
    printList(concatenatedList);
    int searchValue = 6;
    Node* node6 = searchNode(concatenatedList, searchValue);
    if (node6 != nullptr) 
    {
        std::cout << "Address of node with value " << searchValue << ": " << node6 << std::endl;
    } else 
    {
        std::cout << "Node with value " << searchValue << " not found." << std::endl;
    }
    return 0;
}
