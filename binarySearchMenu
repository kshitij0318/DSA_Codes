#include <stdio.h>
int binarySearchIterative(int arr[], int n, int key) {
    int left = 0, right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == key) {
            return mid; 
        } else if (arr[mid] < key) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1;
}
int binarySearchRecursive(int arr[], int left, int right, int key) {
    if (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == key) {
            return mid;
        } else if (arr[mid] < key) {
            return binarySearchRecursive(arr, mid + 1, right, key);
        } else {
            return binarySearchRecursive(arr, left, mid - 1, key);
        }
    }
    return -1;
}
int main() {
    int n, choice, key;
    printf("Enter the number of elements in the sorted array: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter the sorted elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    printf("Enter the key to search for: ");
    scanf("%d", &key);
    printf("Choose the search algorithm:\n");
    printf("1. Binary search with iteration\n");
    printf("2. Binary search with recursion\n");
    scanf("%d", &choice);
    int index;
    switch (choice) {
        case 1:
            index = binarySearchIterative(arr, n, key);
            break;
        case 2:
            index = binarySearchRecursive(arr, 0, n - 1, key);
            break;
        default:
            printf("Invalid choice.\n");
            return 1;
    }
    if (index != -1) {
        printf("Key %d found at index %d\n", key, index);
    } else {
        printf("Key %d not found in the array.\n", key);
    }
    return 0;
}
